// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`upload component reducer test delete upload item action will remove an uploadItem from upload's all queue 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test delete upload item action will remove an uploadItem from upload's all queue 2`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test delete upload item action will remove an uploadItem from upload's all queue 3`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test delete upload item action will remove an uploadItem from upload's all queue 4`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test destroy upload action will remove upload queue from state 1`] = `Immutable.Map {}`;

exports[`upload component reducer test push upload item action will add an uploadItem into upload's wattingQueue 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileOnePath",
        "state": "none",
        "id": null,
        "name": "fileOne",
      },
    ],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test register upload action will register a upload queue to state 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test start upload action will combine upload's watting queue and failed queue then update upload's uploading state 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileTwoPath",
        "state": "watting",
        "id": null,
        "name": "fileTwo",
      },
      Immutable.UploadItem {
        "filepath": "fileOnePath",
        "state": "watting",
        "id": null,
        "name": "fileOne",
      },
    ],
    "uploadedQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileThreePath",
        "state": "none",
        "id": null,
        "name": "fileThree",
      },
    ],
    "failedQueue": Immutable.List [],
    "uploading": true,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test start upload item action will get the first item in upload's watting queue to start upload 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileOnePath",
        "state": "uploading",
        "id": null,
        "name": "fileOne",
      },
      Immutable.UploadItem {
        "filepath": "fileTwoPath",
        "state": "none",
        "id": null,
        "name": "fileTwo",
      },
    ],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": "true",
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test upload complete action will set upload's uploading field to false 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [],
    "uploading": false,
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test upload item failed action will get the first item in upload's watting queue then update this some field and move it to failedQueue queue 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileTwoPath",
        "state": "none",
        "id": null,
        "name": "fileTwo",
      },
    ],
    "uploadedQueue": Immutable.List [],
    "failedQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileOnePath",
        "state": "failed",
        "id": null,
        "name": "fileOne",
      },
    ],
    "uploading": "true",
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;

exports[`upload component reducer test upload item success action will get the first item in upload's watting queue then update this some field and move it to uploaded queue 1`] = `
Immutable.Map {
  "uploadTestKey": Immutable.Upload {
    "wattingQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileTwoPath",
        "state": "none",
        "id": null,
        "name": "fileTwo",
      },
    ],
    "uploadedQueue": Immutable.List [
      Immutable.UploadItem {
        "filepath": "fileOnePath",
        "state": "uploaded",
        "id": "12345",
        "name": "fileOne",
      },
    ],
    "failedQueue": Immutable.List [],
    "uploading": "true",
    "cancle": false,
    "name": "uploadTestKey",
  },
}
`;
